% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data.R
\name{ar_data}
\alias{ar_data}
\alias{ar_parse_data}
\title{Get data}
\usage{
ar_data(
  ar,
  table,
  cursor = NULL,
  limit = 1000L,
  order = c("asc", "desc"),
  temp = c("C", "F"),
  pres = c("mb", "kp"),
  ratio = c("dec", "pct"),
  size = c("in", "mm"),
  speed = c("mps", "kph", "mph"),
  vol = c("g", "l"),
  volumetric_soil_moisture_unit = c("millimeter_per_meter", "inches_per_foot"),
  device = NULL,
  location = NULL,
  local_time = NULL,
  select = NULL,
  start_time = NULL,
  end_time = NULL,
  verbose = FALSE,
  recurse = TRUE
)

ar_parse_data(x)
}
\arguments{
\item{ar}{A \code{\link{arable}} object. Required.}

\item{table}{character; tablename, as returned by \code{\link[=ar_schemas]{ar_schemas()}}. Required.}

\item{cursor}{cursor to start retrieval from}

\item{limit}{integer; limit; (1-10000)}

\item{order}{character; order}

\item{temp}{character; temp unit to use}

\item{pres}{chracter; pressure unit}

\item{ratio}{character; ratio unit}

\item{size}{character; size unit}

\item{speed}{character; speed unit}

\item{vol}{charcter; volume unit}

\item{volumetric_soil_moisture_unit}{character;}

\item{device}{character; device}

\item{location}{character; location}

\item{local_time}{character; local time}

\item{select}{character vector; columns to select, see \code{\link[=ar_schema]{ar_schema()}}
for options of a table}

\item{start_time}{datetime in POSIXct class}

\item{end_time}{datetime in POSIXct class}

\item{verbose}{logical; verbose messages on API calls}

\item{recurse}{logical; should the function recurse until
all data is fetched?}

\item{x}{a data object, as returned by \code{\link[=ar_data]{ar_data()}}}
}
\description{
Get data

parse data into a nice data.frame
}
\examples{
\dontrun{
ar <- arable$new(username = Sys.getenv("AR_USERNAME"),
  password = Sys.getenv("AR_PASSWORD"))
ar_data(ar,
    table = "daily",
    limit = 50L,
    device = "C007538",
    select = c("time", "mean_rh"),
    start_time = Sys.time() - 60*60*24*30*12,
    end_time = Sys.time(),
    verbose = TRUE)
}
}
